esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  
# Enable logging
logger:
  level: ERROR

# Enable Home Assistant API
api: "TqEMVOlWoPATOuPI5KjBLhkPNfaxOVsQxiDlmB5CwJc="

ota:
  platform: esphome
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true

  # Enable fallback hotspot (captive portal) in case wifi connection fails
#  ap:
#    ssid: "${name} Fallback"
#    password: !secret wifi_password

#captive_portal:

text_sensor:
#  - platform: version
#    name: "${name} Version"
  - platform: wifi_info
    ip_address:
      name: "IP"
      icon: mdi:ip-outline
#    mac_address:
#      name: "${name} MAC"
#      icon: mdi:ethernet
#    ssid:
#      name: "${name} SSID"
#      icon: mdi:wifi-lock
#    bssid:
#      name: "${name} BSSID"
#      icon: mdi:router-wireless

time:
  - platform: sntp
    id: sntp_time
    timezone: Asia/Seoul
    servers: 
      - 0.pool.ntp.org
      - 1.pool.ntp.org
      - 2.pool.ntp.org

sensor:
  - platform: uptime
    name: "Uptime"
    type: timestamp

  - platform: wifi_signal
    name: "WiFi signal"
    icon: mdi:wifi-arrow-up-down
    update_interval: 60s
    internal: true
    filters:
      - sliding_window_moving_average:
          window_size: 15
          send_every: 15
    id: wifi_sig

  - platform: template
    name: "WiFi Quality"
    icon: "mdi:wifi"
    update_interval: 60s
    unit_of_measurement: '%'
    entity_category: "diagnostic"
    state_class: measurement
    accuracy_decimals: 0
    lambda: !lambda |-
      float dBm = id(wifi_sig).state;
      if (isnan(dBm)) return -1;
      if (dBm <= -100) return 0;
      if (dBm >= -50) return 100;
      return round(2 * (dBm + 100));
      
binary_sensor:
  - platform: status
    name: "Status"
    
switch:
  - platform: restart
    name: "Restart"
    
  - platform: safe_mode
    name: "Restart Safemode"
